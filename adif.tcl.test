#!/usr/bin/tclsh
# Copyright (c) 2025, Blair Kitchen
# All rights reserved.
#
# See the file "license.terms" for informatio on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
package require Tcl 8.5
package require tcltest 2.3

source adif.tcl
package require adif 0.1

eval ::tcltest::configure $argv

namespace eval ::adif::test {
    namespace import ::tcltest::*
    namespace import ::adif::*

    test readNextRecord-1 {read a standard QSO record} \
        -setup {
            set fileName [makeFile "<CALL:6>ABC123<DXCC:3>291<EOR>" input.adif]
            set inChan [open $fileName "r"]
        } -body {
            readNextRecord $inChan
        } -result [dict create recordType qso recordData [dict create call ABC123 dxcc 291]]
    test readNextRecord-2 {read a standard ADIF header record} \
        -setup {
            set fileName [makeFile "<PROGRAMID:4>ADIF<ADIF_VER:5>3.1.3<EOH>" input.adif]
            set inChan [open $fileName "r"]
        } -body {
            readNextRecord $inChan
        } -result [dict create recordType header recordData [dict create programid ADIF adif_ver 3.1.3]]
    test readNextRecord-3 {return empty record on EOF} \
        -setup {
            set fileName [makeFile "<CALL:6>ABC123<DXCC:3>291<" input.adif]
            set inChan [open $fileName "r"]
        } -body {
            readNextRecord $inChan
        } -result [dict create]

    test getField-1 {get the value of a field} \
        -setup {
            set record [dict create recordType qso recordData [dict create call ABC123 dxcc 291]]
        } -body {
            getField $record call
        } -result "ABC123"
    test getField-2 {return empty value when field does not exist} \
        -setup {
            set record [dict create recordType qso recordData [dict create call ABC123 dxcc 291]]
        } -body {
            getField $record nosuchfield
        } -result ""
    test getField-3 {return the value of a field case insensitive field name} \
        -setup {
            set record [dict create recordType qso recordData [dict create call ABC123 dxcc 291]]
        } -body {
            getField $record CALL
        } -result "ABC123"
    test getField-4 {return the value of a formatted field} \
        -setup {
            set record [dict create recordType qso recordData [dict create call ABC123 dxcc 291]]
        } -body {
            getField $record dxcc
        } -result "UNITED STATES OF AMERICA"

    test writeRecord-1 {write qso record} \
        -setup {
            set record [dict create recordType qso recordData [dict create call ABC123 dxcc 291]]
        } -body {
            writeRecord stdout $record
        } -output "<CALL:6>ABC123\n<DXCC:3>291\n<EOR>\n\n"
    test writeRecord-2 {write header record} \
        -setup {
            set record [dict create recordType header recordData [dict create programid ADIF adif_ver 3.1.3]]
        } -body {
            writeRecord stdout $record
        } -output "<PROGRAMID:4>ADIF\n<ADIF_VER:5>3.1.3\n<EOH>\n\n"

    test foreachRecordInFile-1 {read multiple records in file} \
        -setup {
            set fileName [makeFile "<CALL:6>ABC123<DXCC:3>291<EOR><CALL:6>DEF456<DXCC:3>101<EOR>" input.adif]
        } -body {
            set result [list]
            foreachRecordInFile record $fileName {
                lappend result $record
            }
            return $result
        } -result [list [dict create recordType qso recordData [dict create call ABC123 dxcc 291]] \
            [dict create recordType qso recordData [dict create call DEF456 dxcc 101]]]

    cleanupTests
}

namespace delete ::adif::test
